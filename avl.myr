use std

pkg dstruct =
	type node(@k, @v) = struct
		key : @k
		val : @v
		bal : int8
		n0  : std.option(node(@k, @v)#)
		n1  : std.option(node(@k, @v)#)
	;;

	type avl(@k, @v) = struct
		cmp  : (k1 : @k, k2 : @k -> std.order)
		root : std.option(node(@k, @v)#)
	;;

	generic mkavl : (cmp : (k1 : @k, k2 : @k -> std.order) -> avl(@k, @v))
	generic avlget : (avl : avl(@k, @v), k : @k -> std.option(@v))
;;

generic mkavl = {cmp
	-> [.cmp = cmp, .root = `std.None]
}

generic avlget = {avl, k
	var no

	no = avl.root
	while true
		match no
		| `std.Some n:
			match avl.cmp(k, n.key)
			| `std.Before: no = n.n0
			| `std.Equal : -> `std.Some n.val
			| `std.After : no = n.n1
			;;
		| `std.None:
			-> `std.None
		;;
	;;
}
