use std
use bio
use moreds

const NChain = 2
type word    = int
type chain   = word[2]

const term : word = 0

var words  : std.htab(byte[:], word)#
var nextid : word
var wtos   : byte[:][:]

/* compare two chain of words */
const ccmp = {a : chain, b : chain
	for var i = 0; i < NChain; i++
		if a[i] < b[i]
			-> `std.Before
		elif a[i] > b[i]
			-> `std.After
		;;
	;;
	-> `std.Equal
}

/* read a word from the standard input, None is returned when nothing can be read */
const readw = {f
	const isword = {c; -> std.isalnum(c) || c == '-' }
	const isterm = {c; -> c == '.' || c == '?' || c == ':' }

	var sb = std.mksb()
	while true
		match bio.getc(f)
		| `bio.Ok c:
			if isterm(c)
				std.sbfree(sb)
				-> `std.Some term
			;;
			if isword(c)
				std.sbputc(sb, std.tolower(c))
				break
			;;
		| _:
			std.sbfree(sb)
			-> `std.None
		;;
	;;
	while true
		match bio.peekc(f)
		| `bio.Ok c:
			if isword(c) || c == '\''
				bio.getc(f)
				std.sbputc(sb, std.tolower(c))
			else
				break
			;;
		| _: break
		;;
	;;

	var s = std.sbfin(sb)
	match std.htget(words, s)
	| `std.Some n:
		std.slfree(s)
		-> `std.Some n
	| `std.None:
		/* std.put("{} ", s) */
		std.htput(words, s, nextid)
		wtos = std.slpush(wtos, s)
		-> `std.Some nextid++
	;;
}

const main = {
	var ch  : chain

	var pch = &ch /* hack to capture ch "by reference"... */
	const shift = {w : word
		if w == term
			std.slfill(pch#[:NChain], term)
		else
			std.slcp(pch#[:NChain-1], pch#[1:NChain])
			pch#[NChain-1] = w
		;;
	}

	words = std.mkht(std.slhash, std.sleq)
	var wmap = moreds.mkavl(ccmp)
	nextid = 1
	wtos = std.slalloc(0)
	wtos = std.slpush(wtos, "TERM")

	var c = 1
	var stdin = bio.mkfile(0 castto(std.fd), bio.Rd)

	/* step 1, learn */
	shift(term)
	while true
		match readw(stdin)
		| `std.Some w:
			var sl
			match moreds.avlget(wmap, ch)
			| `std.Some sl0:
				sl = sl0
			| `std.None:
				sl = std.slalloc(0)
			;;
			moreds.avlins(wmap, ch, std.slpush(sl, w))
			shift(w)
		| `std.None:
			break
		;;
	;;

	std.put("Markov says:\n")
	/* step 2, generate random stuff */
	for ; c > 0; c--
		shift(term)
		std.put(">>>")
		while true
			var next
			match moreds.avlget(wmap, ch)
			| `std.Some ws:
				next = ws[std.rand(0, ws.len)]
			| `std.None:
				next = term
			;;
			if next == term
				std.put(".\n")
				break
			;;
			std.put(" {}", wtos[next])
			shift(next)
		;;
	;;
}
